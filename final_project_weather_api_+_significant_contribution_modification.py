# -*- coding: utf-8 -*-
"""Final project Weather API + significant contribution/modification

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/Scorpzgca/bd1ed3e58e5cfafd5cf9c1d132b724fa/final-project-openweather-api_dataset.ipynb
"""

# Final Project using API, Data Sets

#Step 1 Sign Up for OpenWeather API

!pip install requests pandas matplotlib

#Install Required Libraries

# Import libraries

import requests
import pandas as pd
import matplotlib.pyplot as plt

"""Final Project by Joseph Opoku"""

#Step 3 API contrutct Request

# Import libraries
import requests
import pandas as pd
import matplotlib.pyplot as plt

# Define your OpenWeather API key
API_KEY = "f822a1237dd31a0a06230568290599c8"  # Replace with your actual API key!

# Choose a city to get weather for
city_name = "London"

# Construct request URL
url = f"https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={API_KEY}&units=metric"

# Make API request

response = requests.get(url)

# Check the response status code
print(f"Response status code: {response.status_code}")

# Get the JSON data
data = response.json()

# Print the response
print(data)

# Step 4 Extract Useful Information

if "main" in data:
    city = data["name"]
    temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    weather = data["weather"][0]["description"]

    print(f"City: {city}\nTemperature: {temp}Â°C\nHumidity: {humidity}%\nWeather: {weather}")
else:
    print("Error fetching weather data.")

# Step 5 Store Data in DataFrame

data_dict = {
    "city": [city],
    "Temperature (Â°C)": [temp],
    "Humidity (%)": [humidity],
    "Weather Description": [weather]
}

weather_df = pd.DataFrame(data_dict)
print(weather_df)

weather_df.to_csv("weather_data.csv", index=False)
print("Data saved to weather_data.csv")

plt.figure(figsize=(6,4))
plt.bar(weather_df["City"], weather_df["Temperature (Â°C)"], color='skyblue')
plt.xlabel("City")
plt.ylabel("Temperature (Â°C)")
plt.title("Current Temperature")
plt.show()

cities = ["London", "New York", "Paris", "Tokyo", "Sydney"]
weather_data = []

for city in cities:
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()

    if "main" in data:
        weather_data.append({
            "City": city,
            "Temperature (Â°C)": data["main"]["temp"],
            "Humidity (%)": data["main"]["humidity"],
            "Weather Description": data["weather"][0]["description"]
        })

# Convert to DataFrame
multi_city_df = pd.DataFrame(weather_data)
print(multi_city_df)

#Step 7: Visualizing Weather Trends

import matplotlib.pyplot as plt
import requests
import pandas as pd

# Define your OpenWeather API key
API_KEY = "f822a1237dd31a0a06230568290599c8"  # Replace with your actual API key!

cities = ["London", "New York", "Paris", "Tokyo", "Sydney"]
weather_data = []

for city in cities:
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()

    if "main" in data:
        weather_data.append({
            "City": city,
            "Temperature (Â°C)": data["main"]["temp"],
            "Humidity (%)": data["main"]["humidity"],
            "Weather Description": data["weather"][0]["description"]
        })

# Convert to DataFrame
multi_city_df = pd.DataFrame(weather_data)


plt.figure(figsize=(8,5))
plt.bar(multi_city_df["City"], multi_city_df["Temperature (Â°C)"], color='coral')
plt.xlabel("City")
plt.ylabel("Temperature (Â°C)")
plt.title("Weather Comparison Across Cities")
plt.show()

# The hottest and coldest cities
hottest_city = weather_df.loc[weather_df['Temperature (Â°C)'].idxmax()]
coldest_city = weather_df.loc[weather_df['Temperature (Â°C)'].idxmin()]

print("Temperature Analysis:")
print(f"Hottest city: {hottest_city['city']} ({hottest_city['Temperature (Â°C)']}Â°C)")
print(f"Coldest city: {coldest_city['city']} ({coldest_city['Temperature (Â°C)']}Â°C)")
print(f"Temperature difference: {hottest_city['Temperature (Â°C)'] - coldest_city['Temperature (Â°C)']}Â°C")

# Find humidity patterns
most_humid = weather_df.loc[weather_df['Humidity (%)'].idxmax()]
least_humid = weather_df.loc[weather_df['Humidity (%)'].idxmin()]

print("Humidity Analysis:")
print(f"Most humid: {most_humid['city']}, ({most_humid['Humidity (%)']}%)")
print(f"Least humid: {least_humid['city']}, ({least_humid['Humidity (%)']}%)")
print(f"Average humidity: {weather_df['Humidity (%)'].mean():.1f}%")

# Look at weather descriptions
# ðŸ”Ž Can you spot the error in the code below?

print("Weather Conditions Summary:")
weather_counts = weather_df['Weather Description'].value_counts()
for condition, count in weather_counts.items():
    print(f"   {condition.title()}: {count} cities")

# Troubleshooting cell for debugging

print(weather_df)

if "main" in data:
    city = data["name"]
    temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    weather = data["weather"][0]["description"]

    print(f"City: {city}\nTemperature: {temp}Â°C\nHumidity: {humidity}%\nWeather: {weather}")
else:
    print("Error fetching weather data.")

import requests
import pandas as pd

# Define your OpenWeather API key
API_KEY = "f822a1237dd31a0a06230568290599c8"  # Replace with your actual API key!

cities = ["London", "New York", "Paris", "Tokyo", "Sydney"]
weather_data = []

for city in cities:
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()

    if "main" in data:
        weather_data.append({
            "City": city,
            "Temperature (Â°C)": data["main"]["temp"],
            "Humidity (%)": data["main"]["humidity"],
            "Weather Description": data["weather"][0]["description"]
        })

# Convert to DataFrame
weather_df = pd.DataFrame(weather_data)
print(weather_df)

weather_df.to_csv("weather_data.csv", index=False)
print("Data saved to weather_data.csv")

#Complete task 4 in this box / This is important to know the days of the week so people can plan what the weather will be like in preperation for their commute to work and school

days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

print("Monday is the first day of the week it will be scattred clouds in London.")
print("Tuesday is the second day of the week it will be scattred clouds in London.")
print("Wednesday is the third day of the week there will be clear skies in New York.")
print("Thursday is the fourth day of the week there will be clear skies in New York.")
print ("Friday is the fifth day of the week there will be broken clouds in Paris.")
print("Saturday is the sixth day of the week there will be broken clouds in Tokyo.")
print("Sunday is the seventh day of the week there will be scattered clouds in Sydney.")

import requests
import pandas as pd

# Define your OpenWeather API key
API_KEY = "f822a1237dd31a0a06230568290599c8"  # Replace with your actual API key!

cities = ["London", "New York", "Paris", "Tokyo", "Sydney"]
weather_data = []

for city in cities:
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()

    if "main" in data:
        weather_data.append({
            "City": city,
            "Temperature (Â°C)": data["main"]["temp"],
            "Humidity (%)": data["main"]["humidity"],
            "Weather Description": data["weather"][0]["description"]
        })

# Convert to DataFrame
weather_df = pd.DataFrame(weather_data)


# Find the hottest and coldest cities
hottest_city = weather_df.loc[weather_df['Temperature (Â°C)'].idxmax()]
coldest_city = weather_df.loc[weather_df['Temperature (Â°C)'].idxmin()]

print("Temperature Analysis:")
print(f"Hottest city: {hottest_city['City']} ({hottest_city['Temperature (Â°C)']}Â°C)")
print(f"Coldest city: {coldest_city['City']} ({coldest_city['Temperature (Â°C)']}Â°C)")
print(f"Temperature difference: {hottest_city['Temperature (Â°C)'] - coldest_city['Temperature (Â°C)']}Â°C")